substitutions:
  esphome_node_name: "esp32-feather-s2"
  board_model: "lolin_s2_mini"
  framework_type: "arduino"
  ap_pass: ""
  esp_name: "Neopixel Volume"
  # KEYS
  ota_pass: "9924eb48fd975e552539319184eaa9e7"
  encryption_key: "pzbulASkvRmJYZ5APG/0Y+ykKjnoIF96d8OXPGq8pnQ="
  # DISPLAY
  display_platform: "ssd1351_spi"
  display_model: "SSD1351 128x128"
  spi_clk: "10"
  spi_mosi: "11"
  pin_reset: "14"
  pin_cs: "12"
  pin_dc: "13"
  # ROTARY ENCODER
  rotaty_clk: "7"
  rotaty_a: "8"
  rotaty_b: "9" 
  num_leds: "12"
  # Title Track Artist Channel etc... Text entity media entity
  media_player2: "media_player.appletv_4k"
  # Volume Entity (can be same as media_player2)
  media_player: "media_player.bedroom_smart_tv"
#######################################################
#                   end user inputs                   #
#######################################################
esphome:
  name: ${esphome_node_name}
  on_boot:
    priority: -100
    then:
      - script.execute: power_on    
time:
  - platform: homeassistant
    id: esptime
esp32:
  board: ${board_model}
  framework:
    type: ${framework_type}
logger:
api:
  encryption:
    key: "${encryption_key}"
ota:
  password: "${ota_pass}"
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "${esp_name} Hotspot"
    password: "${ap_pass}"
#######################################################
binary_sensor:
  - platform: gpio
    name: '${esp_name} Click'
    id: push_it
    pin: ${rotaty_clk}
    internal: true
    filters:      
      - delayed_off: 50ms
      - invert: 
    on_multi_click:
    - timing: 
        - ON for at most 500ms     
      then: 
        - script.execute: mute
    - timing: 
        - ON for at least 1s       
      then: 
        - script.execute: unmute        
    - timing:  
        - OFF for at most 500ms     
        - ON for at most 500ms
      then:
        - script.execute: skip           
    - timing: 
        - ON for at least 5s
      then:
        - switch.toggle: switch1
#######################################################
switch:
  - platform: template
    name: "${esp_name} Display"   
    optimistic: true
    restore_state: ON
    id: switch1
    turn_on_action:
      - lambda: id(screen).turn_on();    
    turn_off_action:
      - lambda: id(screen).turn_off();
      - light.turn_off: leds
#######################################################
script:
  - id: skip
    mode: single
    then:
      - homeassistant.service:
          service: media_player.media_next_track
          data_template:                 
            entity_id: ${media_player} 
  - id: mute
    mode: single
    then:
      - homeassistant.service:
          service: media_player.volume_mute
          data_template:                 
            is_volume_muted: "true"
            entity_id: ${media_player}
      - light.turn_on: 
          id: leds
          brightness: 33%
          red: 100%
          green: 0%
          blue: 0%
  - id: unmute
    mode: single
    then:
      - homeassistant.service:
          service: media_player.volume_mute
          data_template:                 
            is_volume_muted: "false"
            entity_id: ${media_player} 
  - id: power_on
    mode: single
    then:
      - light.turn_on: 
          id: leds
          brightness: 30%
          transition_length: 3s
          red: 100%
          green: 0%
          blue: 0%
      - delay: 7s
      - light.turn_on: 
          id: leds
          brightness: 40%
          transition_length: 3s
          red: 75%
          green: 37%
          blue: 100%
      - delay: 7s
      - light.turn_on: 
          id: leds
          brightness: 40%
          transition_length: 3s
          red: 0%
          green: 100%
          blue: 0%
      - delay: 10s
      - light.turn_off: 
          id: leds
          transition_length: 2s
  - id: leds_down
    mode: queued
    then:
      - light.turn_on:
          id: leds
          brightness: 0%
      - light.addressable_set:
          id: leds
          range_from: !lambda "return id(rot_enc1).state / 100 * 12;"
          range_to: 12
          color_brightness: 30%
          red: 100%
          green: 0%
          blue: 35%     
      - light.turn_off: leds
  - id: leds_up
    mode: queued
    then:
        - light.turn_on: 
            id: leds
            brightness: 0%
        - light.addressable_set:
            id: leds
            range_from: 0
            range_to: !lambda "return id(rot_enc1).state / 100 * 12;"
            color_brightness: 30%
            red: 30%
            green: 100%
            blue: 0%   
  - id: set_vol
    mode: queued
    then:
      - homeassistant.service:
          service: media_player.volume_set
          data_template:                 
            volume_level: !lambda "return id(rot_enc1).state / 100;"
            entity_id: ${media_player}   
  - id: rot_value_set
    mode: restart
    then:
      - delay: 3000ms
      - sensor.rotary_encoder.set_value:
         id: rot_enc1
         value: !lambda "return id(media_vol).state * 100;"
#######################################################
sensor:
  - platform: rotary_encoder
    name: "${esp_name} Rotary Encoder"
    id: rot_enc1
    pin_a: ${rotaty_a}
    pin_b: ${rotaty_b}
    resolution: 1
    restore_mode: RESTORE_DEFAULT_ZERO
    publish_initial_value: true
    min_value: 0
    max_value: 100
    internal: true
    on_clockwise:
      then:
        - script.execute: leds_up
        - script.execute: set_vol
        - script.execute: rot_value_set
    on_anticlockwise:
      then:
        - script.execute: leds_down
        - script.execute: set_vol
        - script.execute: rot_value_set
  - platform: homeassistant
    id: media_vol
    entity_id: ${media_player}
    attribute: volume_level
    internal: true
#######################################################
text_sensor:
  - platform: homeassistant
    entity_id: ${media_player2}
    id: nowplay
    attribute: media_title
  - platform: homeassistant
    entity_id: ${media_player2}
    id: artist
    attribute: media_artist
  - platform: homeassistant
    entity_id: ${media_player2}
    id: app
#########################################################
light:
  - platform: neopixelbus
    type: GRB
    variant: WS2812
    pin: GPIO17
    num_leds: ${num_leds}
    id: leds
    name: "${esp_name} LED Ring"
    default_transition_length: 1500ms
    restore_mode: ALWAYS_OFF
    effects:
      - addressable_scan:
      - addressable_scan:
          name: Scanner
          move_interval: 2.5s
          scan_width: 1
      - addressable_color_wipe:
      - addressable_color_wipe:
          name: Wipe           
          add_led_interval: 500ms
          reverse: false    
      - pulse:
      - pulse:
          name: "Fast Pulse"         
          transition_length: 2s
          update_interval: 1s
      - pulse:
          name: "Slow Pulse"
          transition_length: 3s      
          update_interval: 5s
      - random:
      - random:
          name: Random Colors
          transition_length: 2s
          update_interval: 4s          
      - strobe:
      - strobe:
          name: Police Strobe
          colors:
            - state: true
              brightness: 100%
              red: 100%
              green: 0%
              blue: 0%
              duration: 50ms
            - state: false
              duration: 25ms
            - state: true
              brightness: 100%
              red: 0%
              green: 0%
              blue: 100%
              duration: 50ms
            - state: false
              duration: 25ms
#######################################################
font:
  - file: 'fonts/arial.ttf'
    id: font1
    size: 18
  - file: "fonts/mdi.ttf"
    id: mdi2
    size: 15
    glyphs: [
      "\U000F075E", #Volume -
      "\U000F075D", #vol +
      ]
  - file: 'fonts/arial.ttf'
    id: font0
    size: 11
    glyphs: '^…*/|\$#<>!?"%()[]+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz&''’'
  - file: 'fonts/arial.ttf'
    id: font00
    size: 9
    glyphs: '^…*/|\$#<>!?"%()[]+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz&''’'
  - file: 'BebasNeue-Regular.ttf'
    id: font2
    size: 30
    glyphs: '^…*/|\$#<>!?"%()[]+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz&''’'
  - file: 'fonts/arial.ttf'
    id: font4
    size: 60
    glyphs: '^…*/|\$#<>!?"%()[]+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz&''’'
  - file: 'fonts/arial.ttf'
    id: font3
    size: 20
    glyphs: '^…*/|\$#<>!?"%()[]+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz&''’'
##########################################################
color:
  - id: red
    red: 100%
    green: 0%
    blue: 0%
    white: 0%
  - id: blue
    red: 0%
    green: 0%
    blue: 100%
    white: 0%
  - id: blue_green
    red: 0%
    green: 50%
    blue: 50%
    white: 5%
  - id: green
    red: 0%
    green: 100%
    blue: 0%
    white: 0%
  - id: violet
    red: 50%
    green: 0%
    blue: 50%
    white: 5%
##########################################################
spi:
  clk_pin: ${spi_clk}
  mosi_pin: ${spi_mosi}
##########################################################
display:
  - platform: ${display_platform}
    model: "${display_model}"
    id: screen
    reset_pin: ${pin_reset}
    cs_pin: ${pin_cs}
    dc_pin: ${pin_dc}
    update_interval: 0.1s 
    brightness: 95%
    lambda: |-
      it.rectangle(0, 0, 128, 128, id(red));
      it.filled_rectangle(14, 3, id(rot_enc1).state, 18, id(blue));
      it.rectangle(13, 2, 102, 20, id(blue));
      if (id(app).has_state()) {
      it.print(64, 40, id(font3), id(violet), TextAlign::BASELINE_CENTER, "Volume");
      } else {
      it.printf(64, 40, id(font3), id(blue), TextAlign::BASELINE_CENTER, "%s", id(app).state.c_str());
      }
      it.strftime(64, 55, id(font0), id(green), TextAlign::BASELINE_CENTER, "%H:%M", id(esptime).now());
      it.print(2, 18, id(mdi2), id(red), "\U000F075E");
      it.print(115, 18, id(mdi2), id(green), "\U000F075D");
      it.printf(64, 70, id(font0), id(blue), TextAlign::BASELINE_CENTER, "%s", id(nowplay).state.c_str());
      it.printf(64, 99, id(font2), id(violet), TextAlign::BASELINE_CENTER, "%.0f%", id(rot_enc1).state);
      it.printf(64, 123, id(font00), id(blue), TextAlign::BASELINE_CENTER, "%s", id(artist).state.c_str());
      it.line(0, 110, 128, 110, id(red));
